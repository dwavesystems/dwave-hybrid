version: 2.1

jobs:
  test-linux:
    parameters:
      python-version:
        type: string
      pip-constraints:
        type: string

    docker:
      - image: circleci/python:<< parameters.python-version >>

    steps:
      - checkout

      - restore_cache: &restore-cache-env
          key: v1-dependencies-{{ checksum "requirements.txt" }}-{{ checksum "tests/requirements.txt" }}-{{ .Environment.CIRCLE_JOB }}

      - run: &create-virtualenv
          name: Create virtual environment
          command: |
            python -m venv env

      - run: &install-requirements
          name: Install requirements
          command: |
            . env/bin/activate
            pip install -U pip
            pip install -r requirements.txt -r tests/requirements.txt
            pip install wheel twine

      - save_cache: &save-cache-env
          key: v1-dependencies-{{ checksum "requirements.txt" }}-{{ checksum "tests/requirements.txt" }}-{{ .Environment.CIRCLE_JOB }}
          paths:
            - env

      - run: &build-package
          name: Build package
          command: env/bin/python setup.py sdist bdist_wheel

      - run: &install-package-with-constraints
          name: Install package (with constraints)
          command: |
            . env/bin/activate
            pip install . -c <(printf '%s\n' << parameters.pip-constraints >>)

      - run: &run-python-tests
          name: Run Python tests
          command: env/bin/coverage run -m unittest discover

      - run: &upload-python-code-coverage
          name: Upload code coverage
          command: |
            . env/bin/activate
            codecov     # calls `coverage xml`, so we must activate venv

  test-macos:
    parameters:
      python-version:
        type: string
      xcode:
        type: string

    macos:
      xcode: << parameters.xcode >>

    steps:
      - checkout

      # install `python-version` and cache it
      - run: &brew-install-pyenv
          name: Install pyenv
          command: HOMEBREW_NO_AUTO_UPDATE=1 brew install pyenv

      - restore_cache: &restore-cache-pyenv
          keys:
            - v1-pyenv-{{ .Environment.CIRCLE_JOB }}-xcode-<< parameters.xcode >>

      - when:
          # backport https://github.com/python/cpython/pull/21113 to support macOS 11 when building py36
          # see also: https://github.com/pyenv/pyenv/issues/1737.
          condition:
            matches:
              pattern: "^3\\.6.*$"
              value: << parameters.python-version >>
          steps:
            - run:
                name: Install Python 3.6 with a patch for macOS 11
                command: |
                  curl -LO https://github.com/python/cpython/commit/8ea6353.patch
                  pyenv install << parameters.python-version>> -s -p < 8ea6353.patch

      - run: &pyenv-install-python
          name: Install python
          command: pyenv install << parameters.python-version >> -s

      - run: &pyenv-set-system-python
          name: Set system python
          command: |
            echo -e '\n\n# Initialize pyenv' >> ~/.bash_profile
            echo 'eval "$(pyenv init --path 2>/dev/null || true)"' >> ~/.bash_profile
            echo 'eval "$(pyenv init -)"' >> ~/.bash_profile
            pyenv global << parameters.python-version >>

      - save_cache: &save-cache-pyenv
          key: v1-pyenv-{{ .Environment.CIRCLE_JOB }}-xcode-<< parameters.xcode >>
          paths:
            - ~/.pyenv

      # install dependencies and cache them
      - restore_cache: *restore-cache-env

      - run: *create-virtualenv

      - run: *install-requirements

      - save_cache: *save-cache-env

      - run: &install-package
          name: Install package
          command: env/bin/pip install .

      - run: *run-python-tests

  test-docs:
    docker:
      - image: circleci/python:3.7

    steps:
      - checkout

      - restore_cache:
          key: v1-dependencies-{{ checksum "requirements.txt" }}-{{ checksum "tests/requirements.txt" }}-{{ checksum "docs/requirements.txt" }}-{{ .Environment.CIRCLE_JOB }}

      - run: *create-virtualenv

      - run: *install-requirements

      - run:
          name: Install docs requirements
          command: env/bin/pip install -r docs/requirements.txt

      - save_cache:
          key: v1-dependencies-{{ checksum "requirements.txt" }}-{{ checksum "tests/requirements.txt" }}-{{ checksum "docs/requirements.txt" }}-{{ .Environment.CIRCLE_JOB }}
          paths:
            - env

      - run: *install-package

      - run:
          name: Build docs
          command: |
            . env/bin/activate
            make -C docs/ html

      - store_artifacts:
          path: ./docs/build/html

      - run:
          name: Test docs
          command: |
            . env/bin/activate
            make -C docs/ doctest

      - run:
          name: Test links
          command: |
            . env/bin/activate
            make -C docs/ linkcheck

  pypi-deploy:
    docker:
      - image: circleci/python:3.9

    steps:
      - checkout

      - restore_cache: *restore-cache-env

      - run: *create-virtualenv

      - run: *install-requirements

      - save_cache: *save-cache-env

      - run: *build-package

      - store_artifacts:
          path: ./dist

      - run:
          name: Upload package to PyPI
          command: env/bin/twine upload -u "$PYPI_USERNAME" -p "$PYPI_PASSWORD" --skip-existing ./dist/*


workflows:
  test:
    jobs:
      - test-linux:
          name: test-linux-<< matrix.python-version >> | << matrix.pip-constraints >>
          matrix:
            parameters:
              python-version: &python-versions ["3.6.12", "3.7.9", "3.8.6", "3.9.0", "3.10.0"]
              pip-constraints:
                - "dimod==0.10.5"
                - "dimod~=0.10.0 dwave-system~=1.0"
                - "dimod==0.11.0rc0 dwave-preprocessing==0.4.0rc0 dwave-system~=1.0"
            exclude:
              # py310 not supported by dimod 0.10.5
              - python-version: "3.10.0"
                pip-constraints: "dimod==0.10.5"
              # py36 not supported by dimod 0.11
              - python-version: "3.6.12"
                pip-constraints: "dimod==0.11.0rc0 dwave-preprocessing==0.4.0rc0 dwave-system~=1.0"    

      - test-macos:
          name: test-macos-<< matrix.python-version >>
          matrix:
            parameters:
              python-version: *python-versions
              xcode: ["13.2.0"]

      - test-docs

  deploy:
    jobs:
      - pypi-deploy:
          filters:
            tags:
              only: /^[0-9]+(\.[0-9]+)*((\.dev|rc)([0-9]+)?)?$/
            branches:
              ignore: /.*/
